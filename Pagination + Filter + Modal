import React, { useContext, useEffect, useState } from "react";
import { DataContext } from "./context/DataContext";
import {
  Button,
  Label,
  Modal,
  Pagination,
  Radio,
  Table,
  TextInput,
} from "flowbite-react";
import { Link } from "react-router-dom";
import { FaSearch } from "react-icons/fa";
import { HiOutlineExclamationCircle } from "react-icons/hi";

const App = () => {
  const { users, getUsers, postUser, deleteUser } = useContext(DataContext);

  // UseState for API
  const [name, setName] = useState();
  const [job, setJob] = useState();
  const [gender, setGender] = useState("male");

  // UseState for Search
  const [filteredUser, setFilteredUser] = useState();

  // UseState for Modal
  const [openModal, setOpenModal] = useState(false);
  const [id, setId] = useState();

  useEffect(() => {
    getUsers();
  }, []);

  // UseState for Pagination
  const pageSize = 5;
  const [currentPage, setCurrentPage] = useState(1);
  const totalPages = Math.ceil(users?.length / pageSize);

  const startUser = (currentPage - 1) * pageSize;
  const endUser = Math.min(currentPage * pageSize, users?.length);
  const currentUsers = users?.slice(startUser, endUser);

  const onPageChange = (page) => {
    setCurrentPage(page);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      await postUser(name, job, gender);
      setName("");
      setJob("");
      getUsers();
    } catch (error) {
      console.log(error);
    }
  };

  const handleDelete = (e) => {
    setOpenModal(true);
    setId(e);
  };

  const confirmDelete = async () => {
    try {
      await deleteUser(id);
      setOpenModal(false);
      getUsers();
    } catch (error) {
      console.log(error);
    }
  };

  const handleSearch = (e) => {
    const searchValue = e;

    const filteredData = users.filter((user) =>
      user.name.toLowerCase().includes(searchValue.toLowerCase())
    );
    setFilteredUser(filteredData);

    if (!searchValue) {
      setFilteredUser(currentUsers);
    }
  };

  return (
    <div className="w-full">
      {/* Form Component */}
      <div className="w-10/12 mx-auto my-6 shadow-lg p-2">
        <form onSubmit={handleSubmit} className="flex flex-col gap-4">
          <div>
            <div className="mb-2 block">
              <Label value="Name" />
            </div>
            <TextInput
              type="text"
              value={name}
              onChange={(e) => setName(e.target.value)}
              required
            />
          </div>
          <div>
            <div className="mb-2 block">
              <Label value="Job" />
            </div>
            <TextInput
              type="text"
              value={job}
              onChange={(e) => setJob(e.target.value)}
              required
            />
          </div>
          <div>
            <div className="mb2 block">
              <fieldset className="flex max-w-md flex-col gap-4">
                <legend className="mb-4">Choose your gender</legend>
                <div className="flex items-center gap-2">
                  <Radio
                    name="gender"
                    value="male"
                    onChange={(e) => setGender(e.target.value)}
                    defaultChecked
                  />
                  <Label htmlFor="male">Male</Label>
                </div>
                <div className="flex items-center gap-2">
                  <Radio
                    name="gender"
                    value="female"
                    onChange={(e) => setGender(e.target.value)}
                  />
                  <Label htmlFor="female">Female</Label>
                </div>
              </fieldset>
            </div>
          </div>
          <Button type="submit">Submit</Button>
        </form>
      </div>
      {/* Filter Component */}
      <div className="w-10/12 mx-auto">
        <div className="mb-2 block">
          <Label value="Search By Name" />
        </div>
        <TextInput
          type="text"
          icon={FaSearch}
          placeholder="Input Name Here"
          onChange={(e) => handleSearch(e.target.value)}
          required
        />
      </div>
      {/* Table Component */}
      <div className="relative overflow-x-auto w-10/12 mx-auto my-6">
        <Table className="w-full">
          <Table.Head>
            <Table.HeadCell>ID</Table.HeadCell>
            <Table.HeadCell>Name</Table.HeadCell>
            <Table.HeadCell>Job</Table.HeadCell>
            <Table.HeadCell>Gender</Table.HeadCell>
            <Table.HeadCell>Options</Table.HeadCell>
            <Table.HeadCell>
              <span className="sr-only">Edit</span>
            </Table.HeadCell>
          </Table.Head>
          <Table.Body className="divide-y">
            {filteredUser === undefined
              ? currentUsers &&
                currentUsers.map((user) => (
                  <Table.Row className="bg-white dark:border-gray-700 dark:bg-gray-800">
                    <Table.Cell className="whitespace-nowrap font-medium text-gray-900 dark:text-white">
                      {user.id}
                    </Table.Cell>
                    <Table.Cell>{user.name}</Table.Cell>
                    <Table.Cell>{user.job}</Table.Cell>
                    <Table.Cell>{user.gender}</Table.Cell>
                    <Table.Cell className="flex gap-3">
                      <Link
                        to={`/edit/${user.id}`}
                        className="font-medium text-cyan-600 hover:underline dark:text-cyan-500"
                      >
                        Edit
                      </Link>
                      <button
                        value={user.id}
                        onClick={(e) => handleDelete(e.target.value)}
                        className="font-medium text-red-600 hover:underline dark:text-red-500"
                      >
                        Delete
                      </button>
                    </Table.Cell>
                  </Table.Row>
                ))
              : filteredUser &&
                filteredUser.map((user) => (
                  <Table.Row className="bg-white dark:border-gray-700 dark:bg-gray-800">
                    <Table.Cell className="whitespace-nowrap font-medium text-gray-900 dark:text-white">
                      {user.id}
                    </Table.Cell>
                    <Table.Cell>{user.name}</Table.Cell>
                    <Table.Cell>{user.job}</Table.Cell>
                    <Table.Cell>{user.gender}</Table.Cell>
                    <Table.Cell className="flex gap-3">
                      <Link
                        to={`/edit/${user.id}`}
                        className="font-medium text-cyan-600 hover:underline dark:text-cyan-500"
                      >
                        Edit
                      </Link>
                      <button
                        value={user.id}
                        onClick={(e) => handleDelete(e.target.value)}
                        className="font-medium text-red-600 hover:underline dark:text-red-500"
                      >
                        Delete
                      </button>
                    </Table.Cell>
                  </Table.Row>
                ))}
          </Table.Body>
        </Table>
      </div>
      <div className="flex overflow-x-auto sm:justify-center">
        <Pagination
          currentPage={currentPage}
          totalPages={totalPages}
          onPageChange={onPageChange}
        />
      </div>
      {/* Modal Component */}
      <Modal
        show={openModal}
        size="md"
        onClose={() => setOpenModal(false)}
        popup
      >
        <Modal.Header />
        <Modal.Body>
          <div className="text-center">
            <HiOutlineExclamationCircle className="mx-auto mb-4 h-14 w-14 text-gray-400 dark:text-gray-200" />
            <h3 className="mb-5 text-lg font-normal text-gray-500 dark:text-gray-400">
              Are you sure you want to delete this user?
            </h3>
            <div className="flex justify-center gap-4">
              <Button color="failure" onClick={() => confirmDelete()}>
                {"Yes, I'm sure"}
              </Button>
              <Button color="gray" onClick={() => setOpenModal(false)}>
                No, cancel
              </Button>
            </div>
          </div>
        </Modal.Body>
      </Modal>
    </div>
  );
};

export default App;
